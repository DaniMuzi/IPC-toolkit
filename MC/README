AKNOWLEDGEMENTS: The code that performs the simulations is largely based on the code released with the paper 'How to simulate patchy particles' by Lorenzo Rovigatti, John Russo & Flavio Romano. Their code is available at https://github.com/lorenzo-rovigatti/PatchyParticles and can be a great resource to extend the code presented here and/or to better understand it. DN is particularly thankful to Lorenzo Rovigatti for the help provided with the usage of the virtual monte carlo move.

######################################################################################################################################################
######################################################################################################################################################

First of all, compile the C code that perfoms the simulations: type 'make'. Then clean the folder: type 'make clean'. This process generates two executables 'IPC' and 'generator'. IPC runs the MC simulations. For its usage, see "USAGE OF MC_runner.sh", point 2. For the usage of generator see "IMPORTANT NOTES", point C.

Once the program is created, the file MC_runners.sh is used to run MC simulations of the IPP model. MC_runners.sh takes two inputs:

- A file 
- A binary variable

The binary variable represents the interaction of the chosen IPP model: 0 for the overlap of spheres model, 1 for the exponential model

The file contains the model parameters and it is generated by a python script named parameters.py 

######################################################################################################################################################
######################################################################################################################################################

THE SCRIPT parameters.py

######################################################################################################################################################
######################################################################################################################################################

The script takes in input only one binary variable, the one explained above: 0 for os model, 1 for exp model. The script further assumes that, in the same folder where it is running, a folder with name "systems" exists. The script creates a file with the model parameters inside such folder. The parameter.py script is basically all hard-coded: the parameters of the model have to be set manually inside of it. 

For the os model: the value of delta_c must always be set, then there are three options.

1) Set a + assume IPC_constraint is on -> the script computes sigma_p and sets delta_p = delta_c = delta
2) Set gamma + assume IPC_constraint is on -> the script computes a, sigma_p and sets delta_p = delta_c = delta
3) The IPC_constraint is off -> set a and sigma_p, compute delta_p 

For the exp model: the value of k and a must always be set.

For both models: the values of the repulsion strength u_EE and u_PP must be set. They are the first and third enrty of the array u (line 347) respectively. 

The output file created in ./systems is the input file of MC_runner.sh

EXAMPLE (with the current settings): python3 parameters.py 1 -> creates a file named EE0.1_PP4.0_D0.2_K13.txt in systems

######################################################################################################################################################
######################################################################################################################################################

USAGE OF MC_runner.sh

######################################################################################################################################################
######################################################################################################################################################

Once the input file is created by parameter.py, MC_runner.sh can be executed giving in input the whole path to the file and the binary variable representing the interaction type.

EXAMPLE: ./MC_running.sh systems/EE0.1_PP4.0_D0.2_K13.txt 1

MC_runners.sh has several hard-coded parameters: 

- max_translation = maximum displacement of the seed of the VMMC cluster
- max_rotation = maximum rotation of the seed of the VMMC 
- L = box size
- max_cluster_size = maximum VMMC cluster size
- max_cluster_translation = maximum translation length of a VMMC cluster
- tot_steps = number of MC step of a simulation
- save_steps = configurations are saved in output by the simlation every print_steps MC steps
- print_steps = energy and acceptance rate are saved in output by the simlation every print_steps MC steps
- restart = whether or not the simulation starts from scratch (set to 0) or if it restarts from a previously saved configuration (set to 1)
- max_tasks = maximum number of parallel simulations to be run
- runs_per_conf = number of parallel simulations per state point

- _params =  the array params contains pairs. Each pair is of the from (T, N) where T is the temperature of the simulation and N is the number of particles. Each pair represents a state point.

########################################################################################################################################################

Executing MC_runners.sh has two consequences.

CONSEQUENCE NUMBER 1: A set of folders is created, starting from the folder 'res', which will contain all the remaining folders. At the end of each path inside ref, there is a folder representing the state point. Each of the folders representing a state point will in turn contain: 

- A series of folders named confs_num1, confs_num2 and so on, up to a number of folders equal to the number of parallel simulations of each state point (which is runs_per_conf)
- A series of files named settings_num1.txt and so on, up to a number of files equal to the number of parallel simulations of each state point (which is runs_per_conf) 
- A series of files named init_cond_num1.txt and so on, up to a number of files equal to the number of parallel simulations of each state point (which is runs_per_conf) 

The meaning of these files and folders are explained below (see IMPORTANT NOTES).

###############################

EXAMPLE: ./MC_running.sh systems/EE0.1_PP4.0_D0.2_K13.txt 1

creates

res/EXPO/NVT_VMMC/EE0.1_PP4.0_D0.2_K13/L10/RotMax0.1_TranMax0.05/Smax25_Tmax1.8/T1.0000_N250:
confs_num1  confs_num3  confs_num5          init_cond_num2.txt  init_cond_num4.txt  settings_num1.txt  settings_num3.txt  settings_num5.txt
confs_num2  confs_num4  init_cond_num1.txt  init_cond_num3.txt  init_cond_num5.txt  settings_num2.txt  settings_num4.txt

res/EXPO/NVT_VMMC/EE0.1_PP4.0_D0.2_K13/L10/RotMax0.1_TranMax0.05/Smax25_Tmax1.8/T1.0000_N500:
confs_num1  confs_num3  confs_num5          init_cond_num2.txt  init_cond_num4.txt  settings_num1.txt  settings_num3.txt  settings_num5.txt
confs_num2  confs_num4  init_cond_num1.txt  init_cond_num3.txt  init_cond_num5.txt  settings_num2.txt  settings_num4.txt

res/EXPO/NVT_VMMC/EE0.1_PP4.0_D0.2_K13/L10/RotMax0.1_TranMax0.05/Smax25_Tmax1.8/T1.1000_N250:
confs_num1  confs_num3  confs_num5          init_cond_num2.txt  init_cond_num4.txt  settings_num1.txt  settings_num3.txt  settings_num5.txt
confs_num2  confs_num4  init_cond_num1.txt  init_cond_num3.txt  init_cond_num5.txt  settings_num2.txt  settings_num4.txt

res/EXPO/NVT_VMMC/EE0.1_PP4.0_D0.2_K13/L10/RotMax0.1_TranMax0.05/Smax25_Tmax1.8/T1.1000_N500:
confs_num1  confs_num3  confs_num5          init_cond_num2.txt  init_cond_num4.txt  settings_num1.txt  settings_num3.txt  settings_num5.txt
confs_num2  confs_num4  init_cond_num1.txt  init_cond_num3.txt  init_cond_num5.txt  settings_num2.txt  settings_num4.txt

res/EXPO/NVT_VMMC/EE0.1_PP4.0_D0.2_K13/L10/RotMax0.1_TranMax0.05/Smax25_Tmax1.8/T1.2000_N250:
confs_num1  confs_num3  confs_num5          init_cond_num2.txt  init_cond_num4.txt  settings_num1.txt  settings_num3.txt  settings_num5.txt
confs_num2  confs_num4  init_cond_num1.txt  init_cond_num3.txt  init_cond_num5.txt  settings_num2.txt  settings_num4.txt

res/EXPO/NVT_VMMC/EE0.1_PP4.0_D0.2_K13/L10/RotMax0.1_TranMax0.05/Smax25_Tmax1.8/T1.2000_N500:
confs_num1  confs_num3  confs_num5          init_cond_num2.txt  init_cond_num4.txt  settings_num1.txt  settings_num3.txt  settings_num5.txt
confs_num2  confs_num4  init_cond_num1.txt  init_cond_num3.txt  init_cond_num5.txt  settings_num2.txt  settings_num4.txt

res/EXPO/NVT_VMMC/EE0.1_PP4.0_D0.2_K13/L10/RotMax0.1_TranMax0.05/Smax25_Tmax1.8/T1.3000_N100:
confs_num1  confs_num3  confs_num5          init_cond_num2.txt  init_cond_num4.txt  settings_num1.txt  settings_num3.txt  settings_num5.txt
confs_num2  confs_num4  init_cond_num1.txt  init_cond_num3.txt  init_cond_num5.txt  settings_num2.txt  settings_num4.txt

###############################

CONSEQUENCE NUMBER 2: A file named runner.sh is created (and executed? TO BE DECIDED). runner.sh simply runs the simulations: it launches jobs until max_tasks simulations are running and terminates when all simulations are finished. Basically, it keeps max_tasks processors busy doing MC simulations until all simulations are done. Note that the program that runs the IPC simulations is named IPC

######################################################################################################################################################
######################################################################################################################################################

IMPORTANT NOTES

######################################################################################################################################################
######################################################################################################################################################

A) The files settings_numX.txt: these are the actual input files of the MC code. They contain all the physical parameters of the IPC mode (like the eccentricity a or the interaction strengths). It further contain the settings of the simulations, like the number of steps and the output rate. It also contains the seed of the random numbers generator used in the simulations, the names of the output files and the name of the files that contains the initial configuration.

B) The files init_cond_numX.txt: these files contain the initial configuration used by the simulation. Note that this is the initial condition used only if restart is set to 0. If restart is set to 1, see point D.

C) The generation of init_cond_numX.txt: line 155 of MC_running.sh executes the script init_cond_creator.sh, giving in input to it the file settings_numX.txt. Such script, first of all, executes generator. This program is created by the compilation of generator.c and when executing it, it attempts to create the files init_cond. generator takes in input the settings files. In particular, it reads the line Initial_conditions_file and used the associated value as the output file: Initial_conditions_file is the name of the input file, generator writes it and IPC reads it and uses its content as initial condition of the simulation.

NOTE 1: generator generates random initial condition. As it can be extremely difficult to generate random configurations with density > 0.7, generator simply refuses to do so. To generate random initial conditions with density > 0.7, a lattice must be generated, given in input to IPC and melted at high temperature (see NOTE 3). 

NOTE 2: the format of the init_cond files is the following: 

line 1: value_of_the_initial_time_step (0, for any practical pupose) number_of_particles box_dimension_along_x box_dimension_along_y box_dimension_along_z
all other lines: a triplet containing the x, y, z coordinated of the center of mass of the particle, a triplet containing the x, y, z coordinated of the first patch of the particle, a triplet containing the x, y, z coordinated of the second patch of the particle, for each particle.

NOTE 3: if a lattice with density > 0.7 must be generated, it must be writted in a format identical to the one of the init_cond files. In this case, the script init_cond_creator.sh, after the unsuccessful attempt to use generator, calls the python script lattice_generator.py. The logic is the same of generator: takes in input the settings file and gives in output the init_cond file. The script generates an FCC lattice with linear size L and N particles, with the patches all aligned along the z axis. If the density is so high that the minimal distance between two particles is smaller
than 1, an error is raised. 

D) restart: the files init_cond are generated and used as input of the simulation if restart is set to 0. If restart is set to 1, the code restart an already performed simulation from where it ended. The mechanism is as follow:

- restart = 0 -> A simulation is performed, with tot_steps made. As shown in the example, a folder confs_numX is generated for each simulation. In these folders, two files are written: a files named confs_all.txt and a file named last.rrr. For the formed, see point E. The latter contains the last saved configuration, which correspond to the configuration at the MC step tot_steps if the simulation has not been interrupted before.

- Increase tot_steps, set restart = 1 and run MC_running.sh again, with the same input -> The settings file are rewritten. The new settings file will be identical to the old ones, with the difference that the tot_steps will be updated to the new vale, that Initial_conditions_file will be set to last.rrr (instructing IPC to read the initial condition from the last observed configuration of the simulation that we are restarting) and that Restart_step_counter will be set to 1, which instructs IPC to restart the MC steps counter from the first element of the first line of last.rrr. The files last.rrr has indeed the same format of the init_cond files, so the first entry of the first line is the value of the MC step at which the configuration was saved.

- Execute again runner.sh -> This will restart all the simulations from where they ended, up to the new value of tot_steps, again occupying max_tasks cores.

E) The output of IPC

- In the folder associated to the state point, a file named energy_numX.txt for each simulation will be generated. It contains the system energy as a function of the MC step, one value every print_every MC steps.

- In the folder associated to the state point, a file named acceptance_numX.txt for each simulation will be generated. It contains the acceptance rate of the VMMC move as a function of the MC step, one value every print_every MC steps.

- In the folders confs_num a file named last.rrr (see above, point D) and a file named confs_all.txt will be generated. The files confs_all.txt contain one configuration every save_every MC steps. The format of a single configuration is the same as that of the init_cond files and of last.rrr, i.e., the first line is of the form 

value_of_the_time_step number_of_particles box_dimension_along_x box_dimension_along_y box_dimension_along_z

and then the position of particles and patches are saved. At the end of a configuration a line with several # is written, which signals the end of the configuration saved at the MC step given in the first line of the configuration.

######################################################################################################################################################
######################################################################################################################################################

EXAMPLE: ./MC_running.sh systems/EE0.1_PP4.0_D0.2_K13.txt 1

After having create the folders shown above, runner.sh is created.

Calling ./runner.sh and waiting for the simulations to end results in having a file for the energy, a file for the acceptance rate, a file with the configurations and a file with the last configuration, for each simulation run

Increase tot_steps, set restart = 1 and run ./MC_running.sh systems/EE0.1_PP4.0_D0.2_K13.txt 1 again.

Calling ./runner.sh again results in having the same situation explained above, but with more values of the energy and of the acceptance rate, as well as with more configurations in the files confs_all and with a different configuration in last.rrr

For any question, suggestion or concern of any type, feel free to write to [corresponding_author].
 
